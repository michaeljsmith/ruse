; Test script for ruse.

; Features required TODO:
; * Substitution in patterns.

;----------------------------------------------------------------------------
; Data manipulation.
(= cons 'cons)
(= (cons @h @t) (builtin cons h t))
(= list 'list)
(= (list . @elms) elms)

;----------------------------------------------------------------------------
; Control structures.
(=* (if @c @tr @f)
		(cond (c tr) (else f)))
(= do-seq 'do-seq)
(= (do-seq @x . @args)
	 (do-seq args))
(= (do-seq @x)
	 x)
(= block 'block)
(=* (block . @args)
	 (scope (do-seq . args)))

;----------------------------------------------------------------------------
; Arithmetic.
(= + '+)
(= - '-)

;----------------------------------------------------------------------------
; Integers.
(= (+ (int @a) (int @b))
	 (add-int a b))

(= (- (int @a) (int @b))
	 (subtract-int a b))

;----------------------------------------------------------------------------
; Buffer ref.
(= buffer-pos-ref 'buffer-pos-ref)
(= (buffer-pos-ref (buf @buf) (int @pos))
	 (tag buffer-pos-ref (list (tag buf buf) (tag int pos))))
(= (+ (buffer-pos-ref (@buf @pos)) ofs)
	 (tag buffer-pos-ref (list buf (+ pos ofs))))
(= (- (buffer-pos-ref (@buf @pos)) ofs)
	 (tag buffer-pos-ref (list buf (- pos ofs))))

;----------------------------------------------------------------------------
; Packer.
(= packing-field-pop 'packing-field-pop)
(= packing-field-push 'packing-field-push)
(= packing-padding-pop 'packing-padding-pop)
(= packing-padding-push 'packing-padding-push)

(= (packing-push @packer @ref @type @fields-tail)
	 (packing-field-push packer (packing-padding-push packer ref type fields-tail) type fields-tail))
(= (packing-pop @packer @ref @type @fields-tail)
	 (packing-padding-pop packer (packing-field-pop packer ref type fields-tail) type fields-tail))

;----------------------------------------------------------------------------
; Contiguous packer.
(= contiguous-packer 'contiguous-packer)

(= (packing-padding-pop contiguous-packer (buffer-pos-ref (@buf @pos)) @type @fields-tail)
	 (tag buffer-pos-ref (list buf pos)))
(= (packing-field-pop contiguous-packer (buffer-pos-ref (@buf @pos)) @type @fields-tail)
	 (- (tag buffer-pos-ref (buf pos)) (sizeof type)))
(= (packing-padding-push contiguous-packer (buffer-pos-ref (@buf @pos)) @type @fields-tail)
	 (tag buffer-pos-ref (list buf pos)))
(= (packing-field-push contiguous-packer (buffer-pos-ref (@buf @pos)) @type @fields-tail)
	 (+ (tag buffer-pos-ref (buf pos)) (sizeof type)))

;----------------------------------------------------------------------------
; Record.
(= record 'record)

; General case constructor.
(= (record @representation @fields)
	 (tag record (list representation fields)))

;----------------------------------------------------------------------------
; Buffer record representation.

(= buffer-record-rep 'buffer-record-rep)
(= (buffer-record-rep @packer)
	 (tag buffer-record-rep packer))

; Define a simplified record constructor using buffer record representation, since this is the default case.
(= buf-record 'buf-record)
(= (buf-record . @field-defs)
	 (block
		 (= recurse 'recurse)
		 (= (recurse ((@name @type) . @tail))
				(cons (list name type) (recurse tail)))
		 (= (recurse ())
				null)
		 (= fields (recurse field-defs))
		 (record (buffer-record-rep contiguous-packer) fields)))

; Get the value of a specified field.
(= (get
		 (record
			 ((buffer-record-rep @packer)
				(field-list @fields)))
		 @name-req
		 @record-ref)

	 ; Recursively search for the field with the specified name.
	 (block
		 (= rec (record ((buffer-record-rep packer) (field-list fields))))
		 (= end-ref (packing-padding-pop packer
									(+ record-ref (sizeof rec))
									void fields))

		 (= recurse 'recurse)

		 ; Name mis-match case.
		 (= (recurse ((@cur-name @cur-type) . @cur-fields-tail) @cur-ref)
				(block
					(= new-ref (packing-padding-pop packer (packing-type-pop packer cur-ref cur-type cur-fields-tail) cur-type cur-fields-tail))
					(recurse cur-fields-tail new-ref)))

		 ; Name match case.
		 (= (recurse ((!name @cur-type) . @cur-fields-tail) @cur-ref)
				(get cur-type cur-ref))

		 ; Base case.
		 (= (recurse () @cur-ref)
				(error "Record has no member \"~a\"" name))
		 
		 (recurse fields end-ref)))

; Get the total size of the struct given the packer in use.
(= (sizeof 
		 (record
			 ((buffer-record-rep @packer)
				(field-list @fields))))

	 ; Calculate the size by creating a dummy reference and packing
	 ; all the fields into it, then returning the position at the end.
	 (block
		 (= dummy-ref (buffer-pos-ref ((buf null) (int 0))))
		 (= recurse 'recurse)
		 (= (recurse ((@name @type) . @fields-remaining))
				(block
					(recurse fields-remaining)
					(set dummy-ref (packing-padding-push packer dummy-ref type fields-remaining))
					(set dummy-ref (packing-type-push packer dummy-ref type fields-remaining))))
		 (= (recurse ())
				null)
		 (recurse fields)
		 (set dummy-ref (packing-padding-push packer dummy-ref void fields))
		 (get dummy-ref pos)))

; Default-construct an instance of the record.
(= (construct
		 (record
			 ((buffer-record-rep @packer)
				(field-list @fields)))
		 @record-ref)

	 ; Recursively construct all the fields, starting with the tail of the list.
	 (block
		 (= field-ref record-ref)
		 (= recurse 'recurse)
		 (= (recurse ((@name @type) . @fields-remaining))
				(block
					(recurse fields-remaining)
					(set dummy-ref (packing-push packer dummy-ref type fields-remaining))))
		 (= (recurse ())
				null)
		 (recurse fields)
		 (packing-push packer dummy-ref void fields)
		 (get dummy-ref pos)))

;----------------------------------------------------------------------------
; Testing.

;(= foo 'foo)
;(= (foo . @elms)
;	 (builtin cons 'hello elms))

;(= (foo @a @b @c)
;	 (builtin list 'hello a b c))

;(= bar (foo 'a 'b 'c))
;bar

(= point (buf-record `(x ,int) `(y ,int) `(z ,int)))
point

;(get test-record 'test-field)
