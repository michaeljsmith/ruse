;--------------------------------------------------------------------------------
;
; Implementation of a simple pattern matching language. This is a dynamically-typed language
; in which a value is a <type/data> pair.
; 
; Programs consist of operator definitions and specializations. Both operators and
; specializations define templates for evaluating forms, which resemble those in lisp. A
; form consists of a series of atoms separated by whitespace and surrounded by parentheses.
; 
; Procedure for defining ruse:
; * Write eval using ruse.
; * Write macro expansion of eval form to scheme.
;
;
;  Copyright (c) 2010 Michael Smith <msmith@msmith.id.au>
;
;  http://github.com/michaeljsmith/ruse
;
;  Permission is hereby granted, free of charge, to any person obtaining a copy
;  of this software and associated documentation files (the "Software"), to
;  deal in the Software without restriction, including without limitation the
;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
;  sell copies of the Software, and to permit persons to whom the Software is
;  furnished to do so, subject to the following conditions:
;  
;  The above copyright notice and this permission notice shall be included in
;  all copies or substantial portions of the Software.
;  
;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;  IN THE SOFTWARE.
;
;--------------------------------------------------------------------------------

;(square (int 'x)
;	(multiply-int x x))

;(define map
;  (lambda (f xs)
;    (cons (apply f (car xs)) (map f (cdr xs)))))

; (double ((list 't) 'ls)
	(for ((list 't) ls) ((t 'x) (* x 2))))

; (eval-with-env (list 
