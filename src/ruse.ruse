; Implementation of a simple pattern matching language. This is a dynamically-typed language
; in which a value is a <type/data> pair.
; 
; Programs consist of operator definitions and specializations. Both operators and
; specializations define templates for evaluating forms, which resemble those in lisp. A
; form consists of a series of atoms separated by whitespace and surrounded by parentheses.
; 
; Procedure for defining ruse:
; * Write eval using ruse.
; * Write macro expansion of eval form to scheme.

(square (int 'x)
	(multiply-int x x))

;(define map
;  (lambda (f xs)
;    (cons (apply f (car xs)) (map f (cdr xs)))))

(double ((list 't) 'ls)
	(for ((list 't) ls) ((t 'x) (* x 2))))

(eval-with-env (list 
